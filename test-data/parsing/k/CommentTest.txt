\d .a.p.PROCESS
 / after whitespace
------------>
Element(FILE)
  Element(NAMESPACE_DEFINITION)
    PsiElement(KTokenType.\\d)('\d')
    Element(USER_ID)
      PsiElement(KTokenType.user_identifier)('.a.p.PROCESS')
  PsiElement(KTokenType.newline)('\n')
  PsiComment(KTokenType.comment)(' / after whitespace')
============|


1 / end of line
------------>
Element(FILE)
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
  PsiComment(KTokenType.comment)(' / end of line')
============|


1 / end of line
1
------------>
Element(FILE)
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
  PsiComment(KTokenType.comment)(' / end of line')
  PsiElement(KTokenType.newline)('\n')
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
============|


` / after symbol
1
------------>
Element(FILE)
  Element(EXPRESSION)
    PsiElement(KTokenType.symbol)('`')
  PsiComment(KTokenType.comment)(' / after symbol')
  PsiElement(KTokenType.newline)('\n')
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
============|


` ` ` ` / after symbol vector
1
------------>
Element(FILE)
  Element(EXPRESSION)
    PsiElement(KTokenType.symbol_vector)('` ` ` `')
  PsiComment(KTokenType.comment)(' / after symbol vector')
  PsiElement(KTokenType.newline)('\n')
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
============|


- / after verb
1
------------>
Element(FILE)
  PsiElement(KTokenType.verb)('-')
  PsiComment(KTokenType.comment)(' / after verb')
  PsiElement(KTokenType.newline)('\n')
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
============|


*: / after composed monad
1
------------>
Element(FILE)
  PsiElement(KTokenType.composed_monad)('*:')
  PsiComment(KTokenType.comment)(' / after composed monad')
  PsiElement(KTokenType.newline)('\n')
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
============|


+/ / after derived verb
1
------------>
Element(FILE)
  PsiElement(KTokenType.derived_verb)('+/')
  PsiComment(KTokenType.comment)(' / after derived verb')
  PsiElement(KTokenType.newline)('\n')
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
============|


: / after colon
1
------------>
Element(FILE)
  PsiElement(KTokenType.:)(':')
  PsiComment(KTokenType.comment)(' / after colon')
  PsiElement(KTokenType.newline)('\n')
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
============|


:: / after double colon
1
------------>
Element(FILE)
  Element(EXPRESSION)
    Element(MONAD_FN_CALL)
      Element(MONAD_FN)
        PsiElement(KTokenType.:)(':')
      Element(MONAD_ARG)
        PsiElement(KTokenType.:)(':')
  PsiComment(KTokenType.comment)(' / after double colon')
  PsiElement(KTokenType.newline)('\n')
  Element(EXPRESSION)
    PsiElement(KTokenType.number)('1')
============|


\
all these
are comments
------------>
Element(FILE)
  PsiErrorElement:<command>, <expression>, <top level assignment>, KTokenType.:, KTokenType.;, KTokenType.\\d, KTokenType.composed_monad, KTokenType.derived_verb, KTokenType.n_colon, KTokenType.newline or KTokenType.verb expected, unexpected end of file
    <empty list>
  PsiComment(KTokenType.comment)('\')
  PsiComment(KTokenType.comment)('\nall these\nare comments')
